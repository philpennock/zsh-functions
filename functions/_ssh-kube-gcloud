#compdef ssh-kube-gcloud

# We want to cache rather than repeatedly hit a remote end-point during one
# run; otherwise, everything before the compset switch reduces down to:
#
#	local -a nodes
#	nodes=( $( kubectl --namespace=kube-system get nodes -o name ) )
#	nodes=("${nodes[@]#node/}")
#
# Instead, we hard-code naughty knowledge that .kube/config is YAML and that
# there's a top-level key identifying the context, and assume that hosts
# haven't sprung up "too recently".

local ret=1
local -a nodes
local cache_policy

local kube_ctx=${${(M)${(f)"$(<~/.kube/config)"}:#current-context:*}#current-context:[[:space:]]}
local cacheid="kubectl:${kube_ctx//[:\/]/_}:nodes"
local curcontext="${curcontext%:}:${kube_ctx//[:\/]/_}:"

zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
if [[ -z "$cache_policy" ]]; then
	zstyle ":completion:${curcontext}:" cache-policy _kube_caching_policy
fi

function _kube_caching_policy {
	local -a oldp
	local gcn

	# rebuild if cache is more than a week old
	oldp=( "$1"(mw+1) )
	(( $#oldp )) && return 0

	# rebuild if gcloud caching updated
	#   kube_ctx ~ gke_opportune-study-142015_us-central1-b_example-cluster
	#   ~/.config/gcloud/completion_cache/syscomet@gmail.com/www.googleapis.com/compute/v1/projects/opportune-study-142015/zones/us-central1-b/instances/_names_
	if [[ $kube_ctx =~ ^gke_([^_]+)_([^_]+)_([^_]+)$ ]]; then
		# FIXME: support XDG paths properly
		#        ALSO: can/should we just use this path?
		for gcn in ~/.config/gcloud/completion_cache/*/www.googleapis.com/compute/v1/projects/${match[1]}/zones/${match[2]}/instances/_names_
		do
			[[ "$gcn" -nt "$1" ]] && return 0
		done
	fi

	return 1
}

if [[ -z "${kube_ctx:-}" ]] || _cache_invalid "$cacheid" || ! _retrieve_cache "$cacheid"
then
	nodes=( $( kubectl --namespace=kube-system get nodes -o name ) )
	nodes=("${nodes[@]#node/}")
	[[ -n "${kube_ctx:-}" ]] && _store_cache "$cacheid" nodes
fi

if compset -P '*@'; then
	_wanted hosts expl 'remote host name' compadd -M 'm:{a-zA-Z}={A-Za-z} r:|.=* r:|=*' "$@" $nodes && ret=0
elif compset -S '@*'; then
	_wanted users expl 'login name' _ssh_users -S '' && ret=0
else
	_wanted hosts expl 'remote host name' compadd -M 'm:{a-zA-Z}={A-Za-z} r:|.=* r:|=*' "$@" $nodes && ret=0
fi

return $ret
